
operator_fat(()string<delimiter(")delimiter(")>operator_fat(\))
operator_fat(()(string=?) string<delimiter(")content(K. Harper, M.D.)delimiter(")> comment(;; Taken from Section 6.3.3. (Symbols\) of the R5RS)
          operator_fat(()(symbol->string)
           operator_fat(()(string->symbol) string<delimiter(")content(K. Harper, M.D.)delimiter(")>operator_fat(\))operator_fat(\))operator_fat(\))
comment(;; BEGIN Factorial)
operator_fat(()reserved(define) (factorial)
  operator_fat(()reserved(lambda) operator_fat(()(n)operator_fat(\))
    operator_fat(()reserved(if) operator_fat(()(=) (n) integer(1)operator_fat(\))
        integer(1)
        operator_fat(()(*) (n) operator_fat(()(factorial) operator_fat(()(-) (n) integer(1)operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))
comment(;; END Factorial)

           comment(;; BEGIN Square)
           operator_fat(()reserved(define) (square)
             operator_fat(()reserved(lambda) operator_fat(()(n)operator_fat(\))  comment(;; My first lambda)
               operator_fat(()reserved(if) operator_fat(()(=) (n) integer(0)operator_fat(\))
                   integer(0)
           comment(;; BEGIN Recursive_Call)
                   operator_fat(()(+) operator_fat(()(square) operator_fat(()(-) (n) integer(1)operator_fat(\))operator_fat(\))
                      operator_fat(()(-) operator_fat(()(+) (n) (n)operator_fat(\)) integer(1)operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))
           comment(;; END Recursive_Call)
           comment(;; END Square)
           
comment(;;LIST OF NUMBERS)
operator_fat(()integer(#b-1111) integer(#xffa12) integer(#o755) integer(#o-755) (+)(i) (-)(i) (+)integer(2)(i) (-)integer(2)(i) integer(3+4i) integer(1.6440287493492101)(i+2) integer(1.344) integer(3/4) integer(#i23/70)operator_fat(\))

comment(;;a vector)
operator_fat(#()operator_fat(')operator_fat(()integer(1) integer(2) integer(3)operator_fat(\)) char(#\\\\)(a) integer(3) pre_constant(#t) pre_constant(#f)operator_fat(\))

comment(;;macros (USELESS AND INCORRECT, JUST TO CHECK THAT IDENTIFIERS ARE RECOGNIZED RIGHT\))
operator_fat(()reserved(syntax-case) operator_fat(()operator_fat(\))
  operator_fat(()operator_fat(()(_) (name) (field) (...)operator_fat(\))
   operator_fat(()(with-syntax)
     operator_fat(()operator_fat(()(constructor) operator_fat(()(gen-id) operator_fat(()(syntax) (name)operator_fat(\)) string<delimiter(")content(make-)delimiter(")> operator_fat(()(syntax) (name)operator_fat(\))operator_fat(\))operator_fat(\))
     operator_fat(()(predicate) operator_fat(()(gen-id) operator_fat(()(syntax) (name)operator_fat(\)) operator_fat(()(syntax) (name)operator_fat(\)) string<delimiter(")content(?)delimiter(")>operator_fat(\))operator_fat(\))
     operator_fat(()operator_fat(()(access) (...)operator_fat(\))
     operator_fat(()(map) operator_fat(()reserved(lambda) operator_fat(()(x)operator_fat(\)) operator_fat(()(gen-id) (x) string<delimiter(")content(set-)delimiter(")> operator_fat(()(syntax) (name)operator_fat(\)) string<delimiter(")content(-)delimiter(")> (x) string<delimiter(")content(!)delimiter(")>operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))