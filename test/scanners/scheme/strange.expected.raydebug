
operator_fat(()string<delimiter(")delimiter(")>operator_fat(\))
operator_fat(()ident(string=?) string<delimiter(")content(K. Harper, M.D.)delimiter(")> comment(;; Taken from Section 6.3.3. (Symbols\) of the R5RS)
          operator_fat(()ident(symbol->string)
           operator_fat(()ident(string->symbol) string<delimiter(")content(K. Harper, M.D.)delimiter(")>operator_fat(\))operator_fat(\))operator_fat(\))
comment(;; BEGIN Factorial)
operator_fat(()reserved(define) ident(factorial)
  operator_fat(()reserved(lambda) operator_fat(()ident(n)operator_fat(\))
    operator_fat(()reserved(if) operator_fat(()ident(=) ident(n) integer(1)operator_fat(\))
        integer(1)
        operator_fat(()ident(*) ident(n) operator_fat(()ident(factorial) operator_fat(()ident(-) ident(n) integer(1)operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))
comment(;; END Factorial)

           comment(;; BEGIN Square)
           operator_fat(()reserved(define) ident(square)
             operator_fat(()reserved(lambda) operator_fat(()ident(n)operator_fat(\))  comment(;; My first lambda)
               operator_fat(()reserved(if) operator_fat(()ident(=) ident(n) integer(0)operator_fat(\))
                   integer(0)
           comment(;; BEGIN Recursive_Call)
                   operator_fat(()ident(+) operator_fat(()ident(square) operator_fat(()ident(-) ident(n) integer(1)operator_fat(\))operator_fat(\))
                      operator_fat(()ident(-) operator_fat(()ident(+) ident(n) ident(n)operator_fat(\)) integer(1)operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))
           comment(;; END Recursive_Call)
           comment(;; END Square)
           
comment(;;LIST OF NUMBERS)
operator_fat(()integer(#b-1111) integer(#xffa12) integer(#o755) integer(#o-755) ident(+)ident(i) ident(-)ident(i) ident(+)integer(2)ident(i) ident(-)integer(2)ident(i) integer(3+4i) integer(1.6440287493492101)ident(i+2) integer(1.344) integer(3/4) integer(#i23/70)operator_fat(\))

comment(;;a vector)
operator_fat(#()operator_fat(')operator_fat(()integer(1) integer(2) integer(3)operator_fat(\)) char(#\\\\)ident(a) integer(3) pre_constant(#t) pre_constant(#f)operator_fat(\))

comment(;;macros (USELESS AND INCORRECT, JUST TO CHECK THAT IDENTIFIERS ARE RECOGNIZED RIGHT\))
operator_fat(()reserved(syntax-case) operator_fat(()operator_fat(\))
  operator_fat(()operator_fat(()ident(_) ident(name) ident(field) ident(...)operator_fat(\))
   operator_fat(()ident(with-syntax)
     operator_fat(()operator_fat(()ident(constructor) operator_fat(()ident(gen-id) operator_fat(()ident(syntax) ident(name)operator_fat(\)) string<delimiter(")content(make-)delimiter(")> operator_fat(()ident(syntax) ident(name)operator_fat(\))operator_fat(\))operator_fat(\))
     operator_fat(()ident(predicate) operator_fat(()ident(gen-id) operator_fat(()ident(syntax) ident(name)operator_fat(\)) operator_fat(()ident(syntax) ident(name)operator_fat(\)) string<delimiter(")content(?)delimiter(")>operator_fat(\))operator_fat(\))
     operator_fat(()operator_fat(()ident(access) ident(...)operator_fat(\))
     operator_fat(()ident(map) operator_fat(()reserved(lambda) operator_fat(()ident(x)operator_fat(\)) operator_fat(()ident(gen-id) ident(x) string<delimiter(")content(set-)delimiter(")> operator_fat(()ident(syntax) ident(name)operator_fat(\)) string<delimiter(")content(-)delimiter(")> ident(x) string<delimiter(")content(!)delimiter(")>operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))operator_fat(\))