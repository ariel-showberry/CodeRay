head<head(---)> 
key(name)operator(:) string(paragraphs)
key(desc)operator(:) string(Textile looks for paragraphs in your text.  Paragraphs are separated by one blank line. Every paragraph is translated as an HTML paragraph.)
key(in)operator(:) string(|-)
  string(A single paragraph.)
  
  string(Followed by another.)
key(html)operator(:) string(|-)
  string(<p>A single paragraph.</p>)
  string(<p>Followed by another.</p>)
head<head(---)>
key(name)operator(:) string(block containing block start)
key(in)operator(:) string(|-)
  string(I saw a ship. It ate my elephant.)
key(html)operator(:) string(|-)
  string(<p>I saw a ship. It ate my elephant.</p>)
head<head(---)>
key(name)operator(:) string(extended block containing block start)
key(in)operator(:) string(|-)
  string(p.. I saw a ship. It ate my elephant.)
  
  string(When the elephant comes to take a p. you...)
key(html)operator(:) string(|-)
  string(<p>I saw a ship. It ate my elephant.</p>)
  string(<p>When the elephant comes to take a p. you&#8230;</p>)
head<head(---)>
key(name)operator(:) string(blockquote containing block start)
key(in)operator(:) string(|-)
  string(bq. I saw a ship. It ate my elephant.)
key(html)operator(:) string(|-)
  string(<blockquote>)
  string(<p>I saw a ship. It ate my elephant.</p>)
  string(</blockquote>)
head<head(---)>
key(name)operator(:) string(extended blockquote containing block start)
key(in)operator(:) string(|-)
  string(bq.. I saw a ship. It ate my elephant.)

  string(When the elephant comes to take a p. you...)
key(html)operator(:) string(|-)
  string(<blockquote>)
  string(<p>I saw a ship. It ate my elephant.</p>)
  string(<p>When the elephant comes to take a p. you&#8230;</p>)
  string(</blockquote>)
head<head(---)> 
key(name)operator(:) string(notextile block containing block start)
key(in)operator(:) string(|-)
  string(notextile. I saw a ship. It ate my elephant.)
key(html)operator(:) string(|-)
  string(I saw a ship. It ate my elephant.)
key(valid_html)operator(:) string(false)
head<head(---)>
key(name)operator(:) string(extended notextile block containing block start)
key(in)operator(:) string(|-)
  string(notextile.. I saw a ship. It ate my elephant.)

  string(When the elephant comes to take a p. you...)
key(html)operator(:) string(|-)
  string(I saw a ship. It ate my elephant.)
  
  string(When the elephant comes to take a p. you...)
key(valid_html)operator(:) string(false)
head<head(---)> 
key(name)operator(:) string(pre block containing block start)
key(in)operator(:) string(|-)
  string(pre. I saw a ship. It ate my elephant.)
key(html)operator(:) string(|-)
  string(<pre>I saw a ship. It ate my elephant.</pre>)
head<head(---)>
key(name)operator(:) string(extended pre block containing block start)
key(in)operator(:) string(|-)
  string(pre.. I saw a ship. It ate my elephant.)

  string(When the elephant comes to take a p. you...)
key(html)operator(:) string(|-)
  string(<pre>I saw a ship. It ate my elephant.</pre>)

  string(<pre>When the elephant comes to take a p. you&#8230;</pre>)
  string(--- )
key(name)operator(:) string(html tags)
key(desc)operator(:) string(You can certainly use HTML tags inside your Textile documents.  HTML will only be escaped if it&#8217;s found in a <code>pre</code> or <code>code</code> block.)
key(in)operator(:) string(|-)
  string(I am <b>very</b> serious.)
  
  string(<pre>)
    string(I am <b>very</b> serious.)
  string(</pre>)
key(html)operator(:) string(|-)
  string(<p>I am <b>very</b> serious.</p>)
  string(<pre>)
    string(I am &lt;b&gt;very&lt;/b&gt; serious.)
  string(</pre>)
head<head(---)> 
key(name)operator(:) string(line breaks)
key(desc)operator(:) string(Line breaks are converted to HTML breaks.)
key(in)operator(:) string(|-)
  string(I spoke.)
  string(And none replied.)
key(html)operator(:) string(|-)
  string(<p>I spoke.<br />)
  string(And none replied.</p>)
key(html_no_breaks)operator(:) string(|-)
  string(<p>I spoke.)
  string(And none replied.</p>)
key(lite_mode_html)operator(:) string(|-)
  string(I spoke.<br />)
  string(And none replied.)
head<head(---)> 
key(name)operator(:) string(curly quotes)
key(desc)operator(:) string(Single- and double-quotes around words or phrases are converted to curly quotations, much easier on the eye.)
key(in)operator(:) string<delimiter(")content(\\"Observe!\\")delimiter(")>
key(html)operator(:) string(<p>&#8220;Observe!&#8221;</p>)
head<head(---)>
key(name)operator(:) string(quotes contained in multi-paragraph quotes)
key(in)operator(:) string(|-)
  string("I first learned about this thing called "Redcloth" several years ago.)

  string("It's wonderful.")
key(html)operator(:) string(|-)
  string(<p>&#8220;I first learned about this thing called &#8220;Redcloth&#8221; several years ago.</p>)
  string(<p>&#8220;It&#8217;s wonderful.&#8221;</p>)
head<head(---)> 
key(name)operator(:) string(double hyphens)
key(desc)operator(:) string(Double hyphens are replaced with an em-dash.)
key(in)operator(:) string(Observe--very nice!)
key(html)operator(:) string(<p>Observe&#8212;very nice!</p>)
key(latex)operator(:) string<delimiter(")content(Observe---very nice!\\n\\n)delimiter(")>
head<head(---)> 
key(name)operator(:) string(double hyphens with spaces)
key(desc)operator(:) string(Double hyphens are replaced with an em-dash and surrounding spaces are preserved.)
key(in)operator(:) string(Observe -- very nice!)
key(html)operator(:) string(<p>Observe &#8212; very nice!</p>)
key(latex)operator(:) string<delimiter(")content(Observe --- very nice!\\n\\n)delimiter(")>
head<head(---)> 
key(name)operator(:) string(parenthetical phrase set off with em dashes)
key(desc)operator(:) string(Sentences with two em dashes should not turn them into strikethroughs)
key(in)operator(:) string(An emdash indicates a parenthetical thought--like this one--which is set apart from the rest of a sentence.)
key(html)operator(:) string<delimiter(")content(<p>An emdash indicates a parenthetical thought&#8212;like this one&#8212;which is set apart from the rest of a sentence.</p>)delimiter(")>
key(latex)operator(:) string<delimiter(")content(An emdash indicates a parenthetical thought---like this one---which is set apart from the rest of a sentence.\\n\\n)delimiter(")>
head<head(---)>
key(name)operator(:) string(parenthetical phrase set off with em dashes surrounded by spaces)
key(desc)operator(:) string(Sentences with two em dashes should not turn them into strikethroughs)
key(in)operator(:) string(An emdash indicates a parenthetical thought -- like this one -- which is set apart from the rest of a sentence.)
key(html)operator(:) string<delimiter(")content(<p>An emdash indicates a parenthetical thought &#8212; like this one &#8212; which is set apart from the rest of a sentence.</p>)delimiter(")>
key(latex)operator(:) string<delimiter(")content(An emdash indicates a parenthetical thought --- like this one --- which is set apart from the rest of a sentence.\\n\\n)delimiter(")>
head<head(---)>
key(name)operator(:) string(single hyphens with spaces)
key(desc)operator(:) string(Single hyphens are replaced with en-dashes if they are surrounded by spaces.)
key(in)operator(:) string(Observe - tiny and brief.)
key(html)operator(:) string(<p>Observe &#8211; tiny and brief.</p>)
key(latex)operator(:) string<delimiter(")content(Observe--tiny and brief.\\n\\n)delimiter(")>
head<head(---)> 
key(name)operator(:) string(midword hyphens )
key(desc)operator(:) string(Single hyphens are left alone if not surrounded by spaces.)
key(in)operator(:) string(Observe the nicely-done hyphen.)
key(html)operator(:) string(<p>Observe the nicely-done hyphen.</p>)
head<head(---)> 
key(name)operator(:) string(ellipses)
key(desc)operator(:) string(Triplets of periods become an ellipsis.)
key(in)operator(:) string(Observe...)
key(html)operator(:) string(<p>Observe&#8230;</p>)
key(lite_mode_html)operator(:) string(Observe&#8230;)
head<head(---)> 
key(name)operator(:) string(dimension sign)
key(desc)operator(:) string(The letter 'x' becomes a dimension sign when used between digits.)
key(in)operator(:) string<delimiter(")content(Observe: 2x3.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>Observe: 2&#215;3.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string(dimension sign with space after)
key(in)operator(:) string<delimiter(")content(The room is 2x3 inches big.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>The room is 2&#215;3 inches big.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string(dimension sign with spaces)
key(in)operator(:) string<delimiter(")content(Observe: 2 x 4.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>Observe: 2 &#215; 4.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string(dimension signs chained)
key(in)operator(:) string<delimiter(")content(Observe: 2x3x4.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>Observe: 2&#215;3&#215;4.</p>)delimiter(")>
key(lite_mode_html)operator(:) string<delimiter(")content(Observe: 2&#215;3&#215;4.)delimiter(")>
head<head(---)> 
key(name)operator(:) string(dimension signs with double primes)
key(in)operator(:) string('My mouse: 2.5" x 4".')
key(html)operator(:) string('<p>My mouse: 2.5&#8243; &#215; 4&#8243;.</p>')
head<head(---)> 
key(name)operator(:) string(dimension signs with single primes)
key(in)operator(:) string<delimiter(")content(My office: 5' x 4.5'.)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p>My office: 5&#8242; &#215; 4.5&#8242;.</p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string(trademark and copyright)
key(desc)operator(:) string(Conversion of trademark and copyright symbols.)
key(in)operator(:) string(one(TM\), two(R\), three(C\).)
key(html)operator(:) string(<p>one&#8482;, two&#174;, three&#169;.</p>)
key(lite_mode_html)operator(:) string(one&#8482;, two&#174;, three&#169;.)
head<head(---)> 
key(name)operator(:) string(headers)
key(desc)operator(:) string(To make an entire paragraph into a Header, place “h<em>n</em>.” at its beginning, where <em>n</em> is a number from 1-6.)
key(in)operator(:) string(h3. Header 3)
key(html)operator(:) string(<h3>Header 3</h3>)
head<head(---)> 
key(name)operator(:) string(blockquote)
key(desc)operator(:) string(To make an entire paragraph into a block quotation, place “bq.” before it.)
key(in)operator(:) string(|-)
  string(Any old text)
  
  string(bq. A block quotation.)
  
  string(Any old text)
key(html)operator(:) string(|-)
  string(<p>Any old text</p>)
  string(<blockquote>)
  string(<p>A block quotation.</p>)
  string(</blockquote>)
  string(<p>Any old text</p>)
head<head(---)> 
key(name)operator(:) string(footnote reference)
key(desc)operator(:) string(Numeric references within text to footnotes appear between square brackets.)
key(in)operator(:) string(This is covered elsewhere[1].)
key(html)operator(:) string(<p>This is covered elsewhere<sup class="footnote"><a href="#fn1">1</a></sup>.</p>)
head<head(---)> 
key(name)operator(:) string(footnote)
key(desc)operator(:) string(To create the footnote that corresponds to its reference within the text, begin a new paragraph with fn and the footnote&#8217;s number, followed by a dot and a space.)
key(in)operator(:) string(fn1. Down here, in fact.)
key(html)operator(:) string(<p class="footnote" id="fn1"><sup>1</sup> Down here, in fact.</p>)
head<head(---)> 
key(name)operator(:) string(em)
key(desc)operator(:) string(Emphasis to text is added by surrounding a phrase with underscores.  In HTML, this often appears as <em>italics</em>.)
key(in)operator(:) string(I _believe_ every word.)
key(html)operator(:) string(<p>I <em>believe</em> every word.</p>)
key(lite_mode_html)operator(:) string<delimiter(")content(I <em>believe</em> every word.)delimiter(")>
head<head(---)> 
key(name)operator(:) string(strong)
key(desc)operator(:) string(Strength can be give to text by surrounding with asterisks.  In HTML, this strength appears as <strong>bold</strong>.)
key(in)operator(:) string(And then? She *fell*!)
key(html)operator(:) string(<p>And then? She <strong>fell</strong>!</p>)
key(lite_mode_html)operator(:) string<delimiter(")content(And then? She <strong>fell</strong>!)delimiter(")>
head<head(---)>
key(name)operator(:) string(strong phrase beginning with a number)
key(desc)operator(:) string(A strong phrase at the beginning of a line that begins with a number should not be recognized as a ul with a start value (no such thing\))
key(in)operator(:) string<delimiter(")content(*10 times as many*)delimiter(")>
key(html)operator(:) string<delimiter(")content(<p><strong>10 times as many</strong></p>)delimiter(")>
head<head(---)> 
key(name)operator(:) string(force bold italics)
key(desc)operator(:) string(Both italics and bold can be forced by doubling the underscores or asterisks.)
key(in)operator(:) string(|-)
  string(I __know__.)
  string(I **really** __know__.)
key(html)operator(:) string(|-)
  string(<p>I <i>know</i>.<br />)
  string(I <b>really</b> <i>know</i>.</p>)
head<head(---)> 
key(name)operator(:) string(citation)
key(desc)operator(:) string(Use double question marks to indicate <em>citation</em>.  The title of a book, for instance.)
key(in)operator(:) string(??Cat's Cradle?? by Vonnegut)
key(html)operator(:) string(<p><cite>Cat&#8217;s Cradle</cite> by Vonnegut</p>)
head<head(---)> 
key(name)operator(:) string(code phrases)
key(desc)operator(:) string(Code phrases can be surrounded by at-symbols.)
key(in)operator(:) string(Convert with @r.to_html@)
key(html)operator(:) string(<p>Convert with <code>r.to_html</code></p>)
key(lite_mode_html)operator(:) string(Convert with <code>r.to_html</code>)
head<head(---)>
key(name)operator(:) string(code phrases not created with multiple email addresses)
key(in)operator(:) string(Please email why@domain.com or jason@domain.com.)
key(html)operator(:) string(<p>Please email why@domain.com or jason@domain.com.</p>)
head<head(---)> 
key(name)operator(:) string(del)
key(desc)operator(:) string(To indicate a passage which has been deleted, surround the passage with hypens.)
key(in)operator(:) string(I'm -sure- not sure.)
key(html)operator(:) string(<p>I&#8217;m <del>sure</del> not sure.</p>)
head<head(---)> 
key(name)operator(:) string(ins)
key(desc)operator(:) string(Pluses around a passage indicate its insertion.)
key(in)operator(:) string(You are a +pleasant+ child.)
key(html)operator(:) string(<p>You are a <ins>pleasant</ins> child.</p>)
head<head(---)> 
key(name)operator(:) string(superscript)
key(desc)operator(:) string(To superscript a phrase, surround with carets.)
key(in)operator(:) string(a ^2^ + b ^2^ = c ^2^)
key(html)operator(:) string(<p>a <sup>2</sup> + b <sup>2</sup> = c <sup>2</sup></p>)
head<head(---)>
key(name)operator(:) string(parenthetical superscript phrase)
key(in)operator(:) string('^(image courtesy NASA\)^')
key(html)operator(:) string('<p><sup>(image courtesy <span class="caps">NASA</span>\)</sup></p>')
head<head(---)> 
key(name)operator(:) string(subscript)
key(desc)operator(:) string(To subscript, surround with tildes.)
key(in)operator(:) string(log ~2~ x)
key(html)operator(:) string(<p>log <sub>2</sub> x</p>)
head<head(---)>
key(name)operator(:) string(parenthetical subscript phrase)
key(in)operator(:) string('~(image courtesy NASA\)~')
key(html)operator(:) string('<p><sub>(image courtesy <span class="caps">NASA</span>\)</sub></p>')
head<head(---)>
key(name)operator(:) string(tight superscript and subscript)
key(desc)operator(:) string(if you want your superscript or subscript to not be surrounded by spaces, you must use square brackets)
key(in)operator(:) string(f(x, n\) = log[~4~]x[^n^])
key(html)operator(:) string('<p>f(x, n\) = log<sub>4</sub>x<sup>n</sup></p>')
head<head(---)> 
key(name)operator(:) string(span)
key(desc)operator(:) string(Lastly, if you find yourself needing to customize the style of a passage, use percent symbols to translate the passage as an HTML span.)
key(in)operator(:) string(I'm %unaware% of most soft drinks.)
key(html)operator(:) string(<p>I&#8217;m <span>unaware</span> of most soft drinks.</p>)
head<head(---)> 
key(name)operator(:) string(style span)
key(desc)operator(:) string(This way, you can apply style settings, as described in the next section to arbitrary phrases.)
key(in)operator(:) string(|-)
  string(I'm %{color:red}unaware%)
  string(of most soft drinks.)
key(html)operator(:) string(|-)
  string(<p>I&#8217;m <span style="color:red;">unaware</span><br />)
  string(of most soft drinks.</p>)
key(lite_mode_html)operator(:) string(|-)
  string(I&#8217;m <span style="color:red;">unaware</span><br />)
  string(of most soft drinks.)
head<head(---)>
key(name)operator(:) string(percent sign)
key(desc)operator(:) string(though percent signs indicate a span, they shouldn't be overly greedy.)
key(in)operator(:) string(|-)
  string(http://blah.com/one%20two%20three)
  string((min\)5%-95%(max\))
key(html)operator(:) string(|-)
  string(<p>http://blah.com/one%20two%20three<br />)
  string((min\)5%-95%(max\)</p>)
head<head(---)> 
key(name)operator(:) string(css class)
key(desc)operator(:) string(A block can be tagged with a CSS class by circling the class in parentheses and placing it just before the period which marks the block.)
key(in)operator(:) string(p(example1\). An example)
key(html)operator(:) string(<p class="example1">An example</p>)
head<head(---)> 
key(name)operator(:) string(css id)
key(desc)operator(:) string(An element ID can be given by prefixing the ID with a pound symbol and using it in place of the class.)
key(in)operator(:) string(p(#big-red\). Red here)
key(html)operator(:) string(<p id="big-red">Red here</p>)
head<head(---)> 
key(name)operator(:) string(class and id combined)
key(desc)operator(:) string(Class and ID can be combined by placing the class first.)
key(in)operator(:) string(p(example1#big-red2\). Red here)
key(html)operator(:) string(<p class="example1" id="big-red2">Red here</p>)
head<head(---)> 
key(name)operator(:) string(css style)
key(desc)operator(:) string(Style settings can be provided directly by surrounding them in curly braces.)
key(in)operator(:) string(p{color:blue;margin:30px}. Spacey blue)
key(html)operator(:) string(<p style="color:blue;margin:30px;">Spacey blue</p>)
head<head(---)> 
key(name)operator(:) string(language designations)
key(desc)operator(:) string(Language designations can be given between angel brackets.)
key(in)operator(:) string(p[fr]. rouge)
key(html)operator(:) string(<p lang="fr">rouge</p>)
head<head(---)> 
key(name)operator(:) string(block attributes on phrase modifiers)
key(desc)operator(:) string(All block attributes can be applied to phrases as well by placing them just inside the opening modifier.)
key(in)operator(:) string(|-)
  string(I seriously *{color:red}blushed*)
  string(when I _(big\)sprouted_ that)
  string(corn stalk from my)
  string(%[es]cabeza%.)
key(html)operator(:) string(|-)
  string(<p>I seriously <strong style="color:red;">blushed</strong><br />)
  string(when I <em class="big">sprouted</em> that<br />)
  string(corn stalk from my<br />)
  string(<span lang="es">cabeza</span>.</p>)
head<head(---)> 
key(name)operator(:) string(inline attributes preceded by text are treated as literal)
key(desc)operator(:) string(modifiers must come first, without anything before them)
key(in)operator(:) string(|-)
  string(I *seriously {color:red}blushed*)
  string(when I _first (big\)sprouted_ that)
  string(corn stalk from my)
  string(%grande [es]cabeza%.)
key(html)operator(:) string(|-)
  string(<p>I <strong>seriously {color:red}blushed</strong><br />)
  string(when I <em>first (big\)sprouted</em> that<br />)
  string(corn stalk from my<br />)
  string(<span>grande [es]cabeza</span>.</p>)
head<head(---)> 
key(name)operator(:) string(align justified)
key(desc)operator(:) string(Text inside blocks can be aligned in four basic ways.)
key(in)operator(:) string(p<>. justified)
key(html)operator(:) string(<p style="text-align:justify;">justified</p>)
head<head(---)> 
key(name)operator(:) string(indentation)
key(desc)operator(:) string(Indentation can also be specified by provide a single left paren for every 1em to the left.  A single right paren for every 1em to the right.)
key(in)operator(:) string(p\)\)\). right ident 3em)
key(html)operator(:) string(<p style="padding-right:3em;">right ident 3em</p>)
head<head(---)> 
key(name)operator(:) string(indentation and alignment)
key(desc)operator(:) string(Identation may be coupled with alignment.)
key(in)operator(:) string(h2(\)>. Bingo.)
key(html)operator(:) string(<h2 style="padding-left:1em;padding-right:1em;text-align:right;">Bingo.</h2>)
head<head(---)> 
key(name)operator(:) string(many modifiers combined)
key(desc)operator(:) string(And, furthermore, coupled with language settings and CSS styles.)
key(in)operator(:) string(h3(\)>[no]{color:red}. Bingo)
key(html)operator(:) string(<h3 style="padding-left:1em;padding-right:1em;text-align:right;color:red;" lang="no">Bingo</h3>)
head<head(---)> 
key(name)operator(:) string(code blocks)
key(desc)operator(:) string(For example, long code blocks belong between <code>pre</code> and <code>code</code> tags.  Please also indent your code inside the tags to be sure that all Textile processors out there will ignore the contents.)
key(in)operator(:) string(|)
  string(<pre>)
  string(<code>)
    string(a.gsub!( /</, '' \))
  string(</code>)
  string(</pre>)
key(html)operator(:) string(|-)
  string(<pre>)
  string(<code>)
    string(a.gsub!( /&lt;/, '' \))
  string(</code>)
  string(</pre>)
head<head(---)> 
key(name)operator(:) string(div tags)
key(desc)operator(:) string(You may also choose to surround sections with <code>div</code> tags to separate your document into sections. <a href="http://www.instiki.org/">Instiki</a> uses this technique to float a sidebar to the right.)
key(in)operator(:) string(|)
  string(<div style="float:right;">)
  
  string(h3. Sidebar)
  
  string("Hobix":http://hobix.com/)
  string("Ruby":http://ruby-lang.org/)
  
  string(</div>)
  
  string(The main text of the page goes here and will stay to the left of the sidebar.)
key(html)operator(:) string(|-)
  string(<div style="float:right;">)
  string(<h3>Sidebar</h3>)
  string(<p><a href="http://hobix.com/">Hobix</a><br />)
  string(<a href="http://ruby-lang.org/">Ruby</a></p>)
  string(</div>)
  string(<p>The main text of the page goes here and will stay to the left of the sidebar.</p>)
head<head(---)> 
key(name)operator(:) string(numbered list)
key(desc)operator(:) string(To make a numbered list, place each item in its own paragraph, preceded by &#8221;#&#8221;.)
key(in)operator(:) string(|-)
  comment(# A first item)
  comment(# A second item)
  comment(# A third)
key(html)operator(:) string(|-)
  string(<ol>)
  	string(<li>A first item</li>)
  	string(<li>A second item</li>)
  	string(<li>A third</li>)
  string(</ol>)
head<head(---)> 
key(name)operator(:) string(nested numbered lists)
key(desc)operator(:) string(These lists may be nested by increasing the number of pound symbols preceding child entries.)
key(in)operator(:) string(|-)
  comment(# Fuel could be:)
  comment(## Coal)
  comment(## Gasoline)
  comment(## Electricity)
  comment(# Humans need only:)
  comment(## Water)
  comment(## Protein)
key(html)operator(:) string(|-)
  string(<ol>)
  	string(<li>Fuel could be:)
  	string(<ol>)
  		string(<li>Coal</li>)
  		string(<li>Gasoline</li>)
  		string(<li>Electricity</li>)
  	string(</ol></li>)
  	string(<li>Humans need only:)
  	string(<ol>)
  		string(<li>Water</li>)
  		string(<li>Protein</li>)
  	string(</ol></li>)
  string(</ol>)
head<head(---)> 
key(name)operator(:) string(bulleted list)
key(desc)operator(:) string(Bulleted lists use an asterisk in place of the pound.)
key(in)operator(:) string(|-)
  string(* A first item)
  string(* A second item)
  string(* A third)
key(html)operator(:) string(|-)
  string(<ul>)
  	string(<li>A first item</li>)
  	string(<li>A second item</li>)
  	string(<li>A third</li>)
  string(</ul>)
head<head(---)> 
key(name)operator(:) string(nested bulleted lists)
key(desc)operator(:) string(These lists may be nested in like manner.)
key(in)operator(:) string(|-)
  string(* Fuel could be:)
  string(** Coal)
  string(** Gasoline)
  string(** Electricity)
  string(* Humans need only:)
  string(** Water)
  string(** Protein)
key(html)operator(:) string(|-)
  string(<ul>)
  	string(<li>Fuel could be:)
  	string(<ul>)
  		string(<li>Coal</li>)
  		string(<li>Gasoline</li>)
  		string(<li>Electricity</li>)
  	string(</ul></li>)
  	string(<li>Humans need only:)
  	string(<ul>)
  		string(<li>Water</li>)
  		string(<li>Protein</li>)
  	string(</ul></li>)
  string(</ul>)
head<head(---)> 
key(name)operator(:) string(links)
key(desc)operator(:) string(Basic links are comprised of a phrase which is linked to a <acronym title="Universal Resource Locator">URL</acronym>.  Place the descriptive phrase in quotation marks.  Follow it immediately by a colon and the URL.)
key(in)operator(:) string(I searched "Google":http://google.com.)
key(html)operator(:) string(<p>I searched <a href="http://google.com">Google</a>.</p>)
key(lite_mode_html)operator(:) string(I searched <a href="http://google.com">Google</a>.)
head<head(---)> 
key(name)operator(:) string(link aliases)
key(desc)operator(:) string(If you are using the same link several times in your document, or you’d just like to be a tad more organized, you can use a link alias.  Place the URL anywhere in your document, beginning with its alias in square brackets.  Then, use the alias in place of the URL, using the link format above.)
key(in)operator(:) string(|-)
  string(I am crazy about "Hobix":hobix)
  string(and "it's":hobix "all":hobix I ever)
  string("link to":hobix!)
  
  operator([)string(hobix]http://hobix.com)
key(html)operator(:) string(|-)
  string(<p>I am crazy about <a href="http://hobix.com">Hobix</a><br />)
  string(and <a href="http://hobix.com">it&#8217;s</a> <a href="http://hobix.com">all</a> I ever<br />)
  string(<a href="http://hobix.com">link to</a>!</p>)
head<head(---)> 
key(name)operator(:) string(image)
key(desc)operator(:) string(You can embed an image in your Textile document by surrounding its URL with exclamation marks.)
key(in)operator(:) string<delimiter(")content(!http://hobix.com/sample.jpg!)delimiter(")>
key(html)operator(:) string(<p><img src="http://hobix.com/sample.jpg" alt="" /></p>)
key(lite_mode_html)operator(:) string(<img src="http://hobix.com/sample.jpg" alt="" />)
head<head(---)> 
key(name)operator(:) string(image title)
key(desc)operator(:) string(A title for the image can also be provided in parens, just before the closing exclamation.)
key(in)operator(:) string<delimiter(")content(!openwindow1.gif(Bunny.\)!)delimiter(")>
key(html)operator(:) string(<p><img src="openwindow1.gif" title="Bunny." alt="Bunny." /></p>)
head<head(---)> 
key(name)operator(:) string(image links)
key(desc)operator(:) string(Links can be attached to images with a colon.)
key(in)operator(:) string<delimiter(")content(!openwindow1.gif!:http://hobix.com/)delimiter(")>
key(html)operator(:) string(<p><a href="http://hobix.com/"><img src="openwindow1.gif" alt="" /></a></p>)
head<head(---)> 
key(name)operator(:) string(image alignments)
key(desc)operator(:) string(Alignments can be applied as well to images.)
key(in)operator(:) string(|-)
  string(!>obake.gif!)
  
  string(And others sat all round the small)
  string(machine and paid it to sing to them.)
key(html)operator(:) string(|-)
  string(<p style="float:right;"><img src="obake.gif" alt="" /></p>)
  string(<p>And others sat all round the small<br />)
  string(machine and paid it to sing to them.</p>)
head<head(---)> 
key(name)operator(:) string(acronym definitions)
key(desc)operator(:) string(Definitions for acronyms can be provided by following an acronym with its definition in parens.)
key(in)operator(:) string(We use CSS(Cascading Style Sheets\).)
key(html)operator(:) string(<p>We use <acronym title="Cascading Style Sheets"><span class="caps">CSS</span></acronym>.</p>)
key(lite_mode_html)operator(:) string(We use <acronym title="Cascading Style Sheets"><span class="caps">CSS</span></acronym>.)
key(no_span_caps_html)operator(:) string(<p>We use <acronym title="Cascading Style Sheets">CSS</acronym>.</p>)
head<head(---)> 
key(name)operator(:) string(tables)
key(desc)operator(:) string(Simple tables can be built by separating fields with pipe characters)
key(in)operator(:) string(|-)
  string(| name | age | sex |)
  string(| joan | 24 | f |)
  string(| archie | 29 | m |)
  string(| bella | 45 | f |)
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<td> name </td>)
  		string(<td> age </td>)
  		string(<td> sex </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> joan </td>)
  		string(<td> 24 </td>)
  		string(<td> f </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> archie </td>)
  		string(<td> 29 </td>)
  		string(<td> m </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> bella </td>)
  		string(<td> 45 </td>)
  		string(<td> f </td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(table headers)
key(desc)operator(:) string(Specify header cells by marking them with an underscore and period.)
key(in)operator(:) string(|-)
  string(|_. name |_. age |_. sex |)
  string(| joan | 24 | f |)
  string(| archie | 29 | m |)
  string(| bella | 45 | f |)
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<th>name </th>)
  		string(<th>age </th>)
  		string(<th>sex </th>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> joan </td>)
  		string(<td> 24 </td>)
  		string(<td> f </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> archie </td>)
  		string(<td> 29 </td>)
  		string(<td> m </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> bella </td>)
  		string(<td> 45 </td>)
  		string(<td> f </td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(table cell attributes)
key(desc)operator(:) string(The period used above marks the end of a cell’s attributes.  Other attributes can be applied as well.)
key(in)operator(:) string(|-)
  string(|_. attribute list |)
  string(|<. align left |)
  string(|>. align right|)
  string(|=. center |)
  string(|<>. justify |)
  string(|^. valign top |)
  string(|~. bottom |)
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<th>attribute list </th>)
  	string(</tr>)
  	string(<tr>)
  		string(<td style="text-align:left;">align left </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td style="text-align:right;">align right</td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td style="text-align:center;">center </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td style="text-align:justify;">justify </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td style="vertical-align:top;">valign top </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td style="vertical-align:bottom;">bottom </td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(table colspan)
key(desc)operator(:) string(You can also specify colspans with a backslash, followed by the cell width.)
key(in)operator(:) string(|-)
  string(|\\2. spans two cols |)
  string(| col 1 | col 2 |)
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<td colspan="2">spans two cols </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> col 1 </td>)
  		string(<td> col 2 </td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(table rowspan)
key(desc)operator(:) string(Rowspan is specified by a forward slash, followed by the row height.)
key(in)operator(:) string(|-)
  string(|/3. spans 3 rows | a |)
  string(| b |)
  string(| c |)
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<td rowspan="3">spans 3 rows </td>)
  		string(<td> a </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> b </td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td> c </td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(block attributes applied to table cells)
key(desc)operator(:) string(All block attributes can be applied to table cells as well.)
key(in)operator(:) string<delimiter(")content(|{background:#ddd}. Grey cell|)delimiter(")>
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<td style="background:#ddd;">Grey cell</td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(black attributes applied to a table)
key(desc)operator(:) string(Table-wide attributes can be applied before the first row of the table.  On its own line, followed by a period.)
key(in)operator(:) string(|-)
  string(table{border:1px solid black}.)
  string(|This|is|a|row|)
  string(|This|is|a|row|)
key(html)operator(:) string(|-)
  string(<table style="border:1px solid black;">)
  	string(<tr>)
  		string(<td>This</td>)
  		string(<td>is</td>)
  		string(<td>a</td>)
  		string(<td>row</td>)
  	string(</tr>)
  	string(<tr>)
  		string(<td>This</td>)
  		string(<td>is</td>)
  		string(<td>a</td>)
  		string(<td>row</td>)
  	string(</tr>)
  string(</table>)
head<head(---)> 
key(name)operator(:) string(black attributes applied to a table row)
key(desc)operator(:) string(Attributes can be applied to a single row by supplying the attribute before the row starts, using a <code>table</code> modifier and following it by a period.)
key(in)operator(:) string(|-)
  string(|This|is|a|row|)
  operator({)string(background:#ddd}. |This|is|grey|row|)
key(html)operator(:) string(|-)
  string(<table>)
  	string(<tr>)
  		string(<td>This</td>)
  		string(<td>is</td>)
  		string(<td>a</td>)
  		string(<td>row</td>)
  	string(</tr>)
  	string(<tr style="background:#ddd;">)
  		string(<td>This</td>)
  		string(<td>is</td>)
  		string(<td>grey</td>)
  		string(<td>row</td>)
  	string(</tr>)
  string(</table>)
head<head(---)>
key(name)operator(:) string(extended block followed by pre block)
key(in)operator(:) string(|-)
  string(div.. Just a test.)
  
  string(Second div.)
  
  string(pre. A pre block ends it.)
key(html)operator(:) string(|-)
  string(<div>Just a test.</div>)
  string(<div>Second div.</div>)
  string(<pre>A pre block ends it.</pre>)
head<head(---)>
key(name)operator(:) string(extended block followed by blockquote)
key(in)operator(:) string(|-)
  string(div.. Just a test.)

  string(Second div.)

  string(bq. A blockquote ends it.)
key(html)operator(:) string(|-)
  string(<div>Just a test.</div>)
  string(<div>Second div.</div>)
  string(<blockquote>)
  string(<p>A blockquote ends it.</p>)
  string(</blockquote>)
head<head(---)>
key(name)operator(:) string(extended block followed by block code)
key(in)operator(:) string(|-)
  string(div.. Just a test.)

  string(Second div.)

  string(bc. A blockcode ends it.)
key(html)operator(:) string(|-)
  string(<div>Just a test.</div>)
  string(<div>Second div.</div>)
  string(<pre><code>A blockcode ends it.</code></pre>)
head<head(---)>
key(name)operator(:) string(extended block followed by notextile block)
key(in)operator(:) string(|-)
  string(div.. Just a test.)

  string(Second div.)

  string(notextile. A notextile block ends it.)
key(html)operator(:) string(|-)
  string(<div>Just a test.</div>)
  string(<div>Second div.</div>)
  string(A notextile block ends it.)
key(valid_html)operator(:) string(false)
head<head(---)>
key(name)operator(:) string(simple parentheses)
key(in)operator(:) string(|-)
  string(before (in parens\) after)
key(html)operator(:) string(|-)
  string(<p>before (in parens\) after</p>)
head<head(---)>
key(name)operator(:) string(parentheses in underscores)
key(in)operator(:) string(|-)
  string(before _(in parens\)_ after)
key(html)operator(:) string(|-)
  string(<p>before <em>(in parens\)</em> after</p>)
head<head(---)>
key(name)operator(:) string(parentheses in asterisks)
key(in)operator(:) string(|-)
  string(before *(in parens\)* after)
key(html)operator(:) string(|-)
  string(<p>before <strong>(in parens\)</strong> after</p>)
head<head(---)>
key(name)operator(:) string(parentheses in underscores in quotes)
key(in)operator(:) string(|-)
  string("before _(in parens\)_ after")
key(html)operator(:) string(|-)
  string(<p>&#8220;before <em>(in parens\)</em> after&#8221;</p>)
head<head(---)>
key(name)operator(:) string(underscores in parentheses)
key(in)operator(:) string(|-)
   string(one _two three_ (four _five six_\) seven)
key(html)operator(:) string(|-)
  string(<p>one <em>two three</em> (four <em>five six</em>\) seven</p>)
head<head(---)>
key(name)operator(:) string(underscores in parentheses in quotes)
key(in)operator(:) string(|-)
   string("one _two three_ (four _five six_\) seven")
key(html)operator(:) string(|-)
  string(<p>&#8220;one <em>two three</em> (four <em>five six</em>\) seven&#8221;</p>)
head<head(---)>
key(name)operator(:) string(underscores in parentheses 2)
key(in)operator(:) string(|-)
   string(one (two _three four_\) five)
key(html)operator(:) string(|-)
  string(<p>one (two <em>three four</em>\) five</p>)
head<head(---)>
key(name)operator(:) string(underscores in parentheses in quotes 2)
key(in)operator(:) string(|-)
   string("one (two _three four_\) five")
key(html)operator(:) string(|-)
  string(<p>&#8220;one (two <em>three four</em>\) five&#8221;</p>)
head<head(---)>
key(name)operator(:) string(caps in parentheses)
key(desc)operator(:) string(Uppercase words of three or more characters that are in parentheses should be recognized as well as those not in parentheses.)
key(in)operator(:) string(IBM or (HAL\))
key(html)operator(:) string(<p><span class="caps">IBM</span> or (<span class="caps">HAL</span>\)</p>)
key(no_span_caps_html)operator(:) string(<p>IBM or (HAL\)</p>)
head<head(---)>
key(name)operator(:) string(phrase modifiers in parentheses)
key(desc)operator(:) string(Inline modifiers are expected to work in parentheses as well.)
key(in)operator(:) string(|-)
  string(__Amanita__s are mushrooms.)
  string(Lungworts (__Lobaria__\) are lichens.)
  string(Blah blah (normal text **bold**\) blah.)
key(html)operator(:) string(|-)
  string(<p>__Amanita__s are mushrooms.<br />)
  string(Lungworts (<i>Lobaria</i>\) are lichens.<br />)
  string(Blah blah (normal text <b>bold</b>\) blah.</p>)
head<head(---)>
key(name)operator(:) string(square brackets are preserved)
key(in)operator(:) string(|-)
  string(citation ["(Berk.\) Hilton"], see)
  operator([)string(Papers "blah blah."])
key(html)operator(:) string(|-)
  string(<p>citation [&#8220;(Berk.\) Hilton&#8221;], see<br />)
  operator([)string(Papers &#8220;blah blah.&#8221;]</p>)